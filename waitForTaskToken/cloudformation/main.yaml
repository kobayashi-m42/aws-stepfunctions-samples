AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-stepfunctions-samples

Parameters:
  Env:
    Type: String
    Default: dev

  ProjectName:
    Default: stepfunctions-sample
    Type: String

  ECSTaskExecutionRole:
    Default: stepfunctions-sample-task-execution-role
    Type: String

  TaskRoleArn:
    Type: String

  AppImage:
    Type: String

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

  SecurityGroupIds:
    Type: String

  TaskCluster:
    Type: String

  StepfunctionsIAMRoleArn:
    Type: String

Resources:
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      TaskRoleArn: !Ref TaskRoleArn
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Family: !Sub ${Env}-stepfunctions-token-sample
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: app
          Image: !Ref AppImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${Env}-${ProjectName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref Env
          Memory: 512
          Essential: true

  TokenStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub ${ProjectName}-token-sample
      DefinitionString:
        !Sub
        - |-
          {
            "StartAt": "ECS Success",
            "States": {
              "ECS Success": {
                "Type": "Task",
                "Resource": "arn:aws:states:::ecs:runTask.waitForTaskToken",
                "Parameters": {
                  "LaunchType": "FARGATE",
                  "Cluster": "${TaskCluster}",
                  "TaskDefinition": "${TaskDefinitionArn}",
                  "Overrides": {
                    "ContainerOverrides": [
                      {
                        "Name": "app",
                        "Command": [
                          "./aws-stepfunctions-token-samples",
                          "true"
                        ],
                        "Environment": [
                          {
                            "Name": "TASK_TOKEN_ENV_VARIABLE",
                            "Value.$": "$$.Task.Token"
                          }
                        ]
                      }
                    ]
                  },
                  "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                      "Subnets": ["${SubnetId1}", "${SubnetId2}"],
                      "SecurityGroups": ["${SecurityGroupIds}"],
                      "AssignPublicIp": "DISABLED"
                    }
                  }
                },
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "FailState"
                  }
                ],
                "Next": "ECS Error"
              },
              "ECS Error": {
                "Type": "Task",
                "Resource": "arn:aws:states:::ecs:runTask.waitForTaskToken",
                "Parameters": {
                  "LaunchType": "FARGATE",
                  "Cluster": "${TaskCluster}",
                  "TaskDefinition": "${TaskDefinitionArn}",
                  "Overrides": {
                    "ContainerOverrides": [
                      {
                        "Name": "app",
                        "Command": [
                          "./aws-stepfunctions-token-samples",
                          "false"
                        ],
                        "Environment": [
                          {
                            "Name": "TASK_TOKEN_ENV_VARIABLE",
                            "Value.$": "$$.Task.Token"
                          }
                        ]
                      }
                    ]
                  },
                  "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                      "Subnets": ["${SubnetId1}", "${SubnetId2}"],
                      "SecurityGroups": ["${SecurityGroupIds}"],
                      "AssignPublicIp": "DISABLED"
                    }
                  }
                },
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "FailState"
                  }
                ],
                "Next": "SuccessState"
              },
              "SuccessState": {
                "Type": "Succeed"
              },
              "FailState": {
                "Type": "Fail",
                "Cause": "Invalid response.",
                "Error": "Error"
              }
            }
          }
        - SubnetId1: !Ref SubnetId1
          SubnetId2: !Ref SubnetId2
          SecurityGroupIds: !Ref SecurityGroupIds
          TaskCluster: !Ref TaskCluster
          TaskDefinitionArn: !Ref ECSTaskDefinition
      RoleArn: !Ref StepfunctionsIAMRoleArn
